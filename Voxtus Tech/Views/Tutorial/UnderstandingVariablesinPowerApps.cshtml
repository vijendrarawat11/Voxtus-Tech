@{
    ViewData["Title"] = "Fundamentals of Variables in Power Apps Canvas Apps |";
}

<!-- ======= Meta Desctiption ======= -->
@section MetaTags {
    <meta name="title" content="Fundamentals of Variables in Power Apps Canvas Apps">
    <meta name="description" content="Learn the fundamentals of variables in Power Apps Canvas Apps. Discover their practical uses and how to implement them effectively in your app development journey.">
    <meta name="keywords" content="Variables in Power Apps, Power Apps variables, Canvas Apps variables, fundamentals of variables, Power Apps tutorial, practical uses of variables, Power Apps guide, Power Apps basics, app variables usage, store data in Power Apps, Power Apps development, manage variables Power Apps, Canvas App features, Power Apps tools, app development Power Apps">
    <meta name="robots" content="index, follow">
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    <meta name="language" content="English">
}
@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
    Layout = "~/Views/Shared/_TutorialLayout.cshtml";
}

<body style="background-color:ghostwhite;">
    <div class="container border border-1 rounded-pill shadow-lg d-flex justify-content-center flex-lg-row  mt-3  p-sm-3" style="width:45%;background-color:#CBE0F5;"><h1 class="my-auto ps-3" style="color:#266aad">Learn with</h1><img src="~/images/v1.png" alt="Voxtus" title="Voxtus" loading="lazy" class="img-fluid mx-1" height="50" width="50" /></div>
    <div class="container p-3 mt-3 pb-5 mb-4">
        <h5>Introduction:</h5>
        <p class="mt-3">In Power Apps, variables play a critical role in controlling app behavior and managing data efficiently. If you're just starting to explore Power Apps, understanding how to work with variables will enable you to create more dynamic, user-friendly applications. In this post, we'll cover the fundamentals of variables in Power Apps Canvas Apps and explore their practical uses to help you get started.</p>
        <h5>1. Understanding Variables in Power Apps</h5>
        <p class="mt-3">Variables in Power Apps are temporary storage locations that hold information while your app is running. Unlike data stored in a data source (like a SharePoint list or Dataverse), variables only exist during a session and are lost once the app is closed or refreshed.</p>
        <p class="mt-3">In Power Apps, there are three main types of variables:</p>
        <ul class="d-flex flex-column pb-3 justify-content-center gap-2">
            <li>
                <span class="fw-semibold">Global Variables (Set function):</span> These variables store values that can be accessed anywhere in the app. They are ideal for storing information that is needed across different screens.
                <div class=" d-flex justify-content-between">
                    <h6></h6>
                    <button class="btn btn-primary" data-clipboard-action="copy" data-clipboard-target="#code1">
                        <i class="bi bi-clipboard"></i>
                    </button>
                </div>
                <pre id="code1" class="border px-5 pt-3 pb-3" style="background-color:whitesmoke">Set(gblWelcomeMessage, "Hello, World!")</pre>
            </li>
            <li>
                <span class="fw-semibold">Context Variables (UpdateContext function):</span> These variables are specific to a particular screen. They are great for managing the state of controls or UI elements on the screen.
                <div class=" d-flex justify-content-between">
                    <h6></h6>
                    <button class="btn btn-primary" data-clipboard-action="copy" data-clipboard-target="#code2">
                        <i class="bi bi-clipboard"></i>
                    </button>
                </div>
                <pre id="code2" class="border px-5 pt-3 pb-3" style="background-color:whitesmoke">UpdateContext({locContextVar: "This is a context variable"})</pre>
            </li>
            <li>
                <span class="fw-semibold">Collections (Collect function):</span> Collections are a type of variable that can store a table or list of values. They allow you to manage multiple records and perform operations like sorting, filtering, and adding new items.
                <div class=" d-flex justify-content-between">
                    <h6></h6>
                    <button class="btn btn-primary" data-clipboard-action="copy" data-clipboard-target="#code3">
                        <i class="bi bi-clipboard"></i>
                    </button>
                </div>
                <pre id="code3" class="border px-5 pt-3 pb-3" style="background-color:whitesmoke">Collect(colEmployeeData, {Name: "John", Age: 30})</pre>
            </li>
        </ul>
        <p>Each variable type has its use case, and choosing the right type can make your app more efficient and maintainable.</p>
        <div class="d-flex justify-content-around pb-3">
            <a asp-controller="Tutorial" asp-action="Responsivedesignandlayouttechniques" class="btn btn-primary fw-semibold" type="submit" style="background-color:#266aad"><i class="bi bi-arrow-bar-left"></i> Previous</a>

            <a asp-controller="Tutorial" asp-action="PracticalUsesofVariablesinPowerApps" class="btn btn-primary fw-semibold" type="submit" style="background-color:#266aad">Next <i class="bi bi-arrow-bar-right"></i></a>
        </div>
    </div>
</body>

<script src="~/lib/jquery/dist/jquery.min.js"></script>
<script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@4.5.2/dist/js/bootstrap.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/clipboard.js/2.0.6/clipboard.min.js"></script>

<script>
    new ClipboardJS('.btn');
</script>