@{
    ViewData["Title"] = "Export SharePoint List to Excel Using Power Automate |";
}

<!-- ======= Meta Desctiption ======= -->

@section MetaTags {
    
    <meta name="title" content="Export SharePoint List to Excel Using Power Automate">
    <meta name="description" content="Learn how to export data from a SharePoint list to Excel and send it via email using Power Automate with step-by-step guidance and Office Scripts.">
    <meta name="keywords" content="Power Automate, Export SharePoint to Excel, SharePoint list to Excel, Power Automate Excel export, Office Script Power Automate, Automate Excel from SharePoint, Get items from SharePoint, Excel automation flow, Power Automate tutorial, SharePoint to Excel email, Power Automate Excel table, Create flow SharePoint Excel, SharePoint data export, Scheduled Excel export, Microsoft Power Automate guide">
    <meta name="robots" content="index, follow">
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    <meta name="language" content="English">
}

@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
    Layout = "~/Views/Shared/_PowerAutomateLayout.cshtml";
}
<div class="container bg-light mt-4 service-details align-items-center" style="border:2px solid black">
    <div class="mt-2 mx-2">
        <h1 class="mt-4 mx-3 text-center">
            Using Power Automate to Export Data to Excel from SharePoint
        </h1><hr />
    </div>
    <div class="mt-2 mx-3 bg-white pt-1 pb-3">
        <p class="mt-4 mx-3"> Automating business processes has never been easier through <span class="fw-semibold">Power Automate, </span>especially when you work with SharePoint lists and Excel. In this blog, we’ll walk through how we can export data out from a <span class="fw-semibold">SharePoint list to an Excel file</span> by the usage of Power Automate, also we'll email that Excel file as an attachment.</p>
        <div class="mt-3 mx-3 pt-3">
            <img src="~/images/blog/power automate/exportsharepointtoexcel/power9.jpg" alt="power9" class="img-fluid ounded mx-auto d-block" height="760" width="870" />
        </div>
        <p class="mt-4 mx-3">Let us explore the building of this flow in a step-by-step manner, with the Excel file being stored in a SharePoint document library and our SharePoint list being named “Cab_Booking_Tbl”.</p>
        <div class="mt-3 mx-3 pt-3">
            <img src="~/images/blog/power automate/exportsharepointtoexcel/Power10.jpg" alt="Power10" class="img-fluid ounded mx-auto d-block" height="760" width="870" />
        </div>
        <div class="mt-2 mx-2">
            <h3 class="mt-4 mx-3 text-center">
                Step-by-Step Flow Setup
            </h3>
		</div>
        <div class="mt-3 mx-3 pt-3">
            <img src="~/images/blog/power automate/exportsharepointtoexcel/Power1.jpg" alt="Power1" class="img-fluid ounded mx-auto d-block" height="760" width="870" />
        </div>
        <h3 class="mt-4 mx-3 text-center">
            Step 1: Trigger Your Flow
        </h3>
        <p class="mt-4 mx-3">Start a fresh flow after opening Power Automate first. Any trigger is something on which you can depend that depends on your requirement. The Recurrence trigger is intended for the use of <span class="fw-semibold">recurring</span> automation.</p>
        <p class="mt-4 mx-3">In our example, we’re using with the Recurrence trigger. Since we use it, the flow runs on a schedule.</p>
        <div class="mt-3 mx-3 pt-3">
            <img src="~/images/blog/power automate/exportsharepointtoexcel/Power2.jpg" alt="Power2" class="img-fluid ounded mx-auto d-block" height="760" width="870" />
        </div>
        <hr />
        <h3 class="mt-4 mx-3 text-center">
            Step 2: Get Items from SharePoint
        </h3>
        <p class="mt-4 mx-3">Add the <span class="fw-semibold">“Get items” </span>action.</p>
        <ul class="mt-3 mx-1">
            <li>
                <span class="fw-semibold">Site Address:</span>You must choose your address.
            </li>
            <li>
                <span class="fw-semibold">List Name:</span> Select your SharePoint list (Cab Booking tbl).
            </li>
            <li>
                <span class="fw-semibold">Filter Query (Optional):</span> If you want to filter the results, add your OData query here.
            </li>
        </ul>
        <div class="mt-3 mx-3 pt-3">
            <img src="~/images/blog/power automate/exportsharepointtoexcel/Power3.jpg" alt="Power3" class="img-fluid ounded mx-auto d-block" height="760" width="870" />
        </div>
        <p class="mt-4 mx-3">This action will fetch the list items you want to export.</p>
        <hr />
        <h3 class="mt-4 mx-3 text-center">
            Step 3: Run Office Script on Excel
        </h3>
        <p class="mt-4 mx-3">Use the <span class="fw-semibold">“Run Script”</span> action to initialize your Excel file. This step assumes you have:.</p>
        <ul class="mt-3 mx-1">
            <li>
                Created an Excel file in a SharePoint document library.
            </li>
            <li>
                Defined a named <span class="fw-semibold">table</span> in the Excel workbook.
            </li>
            <li>
                Created an <span class="fw-semibold">Office Script</span> in Excel to prepare or clear the table if needed.
            </li>
        </ul>
        <div class="mt-3 mx-3 pt-3">
            <img src="~/images/blog/power automate/exportsharepointtoexcel/Power4.jpg" alt="Power4" class="img-fluid ounded mx-auto d-block" height="760" width="870" />
        </div>
        <p class="mt-4 mx-3">Configure:</p>
        <ul class="mt-3 mx-1">
            <li><span class="fw-semibold">Location:</span> OneDrive or SharePoint.</li>
            <li><span class="fw-semibold">Document Library:</span> Where the Excel file is stored.</li>
            <li><span class="fw-semibold">File:</span> Path to the Excel file.</li>
            <li><span class="fw-semibold">Script:</span> Select the script you've written in Excel.</li>
        </ul>
        <hr />
        <h3 class="mt-4 mx-3 text-center"> Step 4: Apply to Each – Add Row to Table</h3>
        <p class="mt-4 mx-3">Use the<span class="fw-semibold"> Apply to each</span> control to loop through the SharePoint list items.</p>
        <ul class="mt-3 mx-1 fw-semibold">
            <li><span class="fw-semibold">Input: </span>Use the dynamic value from the “Get items” step. Add “Value” from Dynamic Value.</li>
            <li>
                Inside the loop, add <span class="fw-semibold">“Add a row into a table” action</span>
                <ul class="mt-3 mx-1">
                    <li><span class="fw-semibold">Location:</span> Same as above.</li>
                    <li><span class="fw-semibold">Document Library</span></li>
                    <li><span class="fw-semibold">File</span></li>
                    <li><span class="fw-semibold">Table:</span> The table name inside the Excel file.</li>
                    <li><span class="fw-semibold">Row Values:</span> Map your list columns to Excel columns.</li>
                </ul>
            </li>
        </ul>
         <div class="mt-3 mx-3 pt-3">
            <img src="~/images/blog/power automate/exportsharepointtoexcel/Power5.jpg" alt="Power5" class="img-fluid ounded mx-auto d-block" height="760" width="870" />
        </div>
        <hr />
        <h3 class="mt-4 mx-3 text-center">Step 5: Add Delay</h3>
        <p class="mt-4 mx-3">To ensure the Excel file updates are completed before we download it:</p>
        <ul class="mt-3 mx-1 ">
            <li>	Add the <span class="fw-semibold">“Delay” </span>action.</li>
            <li>Set it to 5 minutes.</li>
        </ul>
        <p class="mt-4 mx-3">This is especially useful when dealing with large lists or many rows.</p>
        <div class="mt-3 mx-3 pt-3">
            <img src="~/images/blog/power automate/exportsharepointtoexcel/Power6.jpg" alt="Power6" class="img-fluid ounded mx-auto d-block" height="760" width="870" />
        </div>
        <hr />
        <h3 class="mt-4 mx-3 text-center">Step 6: Get File Content</h3>
        <p class="mt-4 mx-3">Add the <span class="fw-semibold">“Get file content” </span>action to retrieve the generated Excel file.</p>
        <ul class="mt-3 mx-1">
            <li><span class="fw-semibold">Site Address:</span> Your SharePoint site.</li>
            <li><span class="fw-semibold">File Identifier:</span> Use the file path to the Excel file.</li>
        </ul>
        <p class="mt-4 mx-3">This will give you the file content needed for the email attachment.</p>
        <div class="mt-3 mx-3 pt-3">
            <img src="~/images/blog/power automate/exportsharepointtoexcel/Power7.jpg" alt="Power7" class="img-fluid ounded mx-auto d-block" height="760" width="870" />
        </div>
        <hr />
        <h3 class="mt-4 mx-3 text-center">Step 7: Send Email with Attachment</h3>
        <p class="mt-4 mx-3">Finally, add the <span class="fw-semibold">“Send an email (V2)”</span> action.</p>
        <ul class="mt-3 mx-1">
            <li><span class="fw-semibold">To:</span> Recipient’s email address.</li>
            <li><span class="fw-semibold">Subject:</span> Email subject line.</li>
            <li><span class="fw-semibold">Body:</span> Custom message body.</li>
            <li><span class="fw-semibold">Attachment Name:</span> Provide the Excel filename (e.g., CabBookingExport.xlsx).</li>
            <li><span class="fw-semibold">Attachment Content:</span> Use File Content from the “Get file content” step.</li>
        </ul>
        <div class="mt-3 mx-3 pt-3">
            <img src="~/images/blog/power automate/exportsharepointtoexcel/Power8.jpg" alt="Power8" class="img-fluid ounded mx-auto d-block" height="760" width="870" />
        </div>
    <hr />
    <div class="row mb-2">
        <h6 class="text-center text-primary">
            If you have any doubts or questions related to this blog, you can Contact us by Email: info@voxtus.com
        </h6>
    </div>

    <div class="row">
        <div class="col-8"></div>
        <div class="col-4"><p><b>Himanshu Nautiyal<br />Power Automate Consultant</b></p></div>
    </div>
</div>
</div>
<script>
    document.querySelectorAll(".copy-button").forEach(function (button) {
        button.addEventListener("click", function () {
            var textToCopy = this.getAttribute("data-clipboard-target");
            var input = document.querySelector(textToCopy);

            input.select();
            document.execCommand("copy");

            // Change the button text to indicate success
            this.innerHTML = "Copied!";

            // Reset the button text after a short delay
            setTimeout(function () {
                button.innerHTML = "Copy";
            }, 1000);
        });
    });
</script>

